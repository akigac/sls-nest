service: sls-nest

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt.stage, 'dev'}
  region: ap-northeast-1
#  useDotenv: true

  apiGateway:
    shouldStartNameWithService: true

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: 
            - "*"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            - !Join [ ":", [ "arn:aws:dynamodb", Ref: AWS::Region, Ref: AWS::AccountId, "table/User" ] ]
  environment:
    stage: ${self:provider.stage}
    STORAGE_BUCKET: ${env:STORAGE_BUCKET}

layers:
  node:
    path: layer/js
    name: ${opt:stage, self:provider.stage, 'dev'}-node # optional, Deployed Lambda layer name
    description: Description of what the lambda layer does # optional, Description to publish to AWS
  openssl:
    path: layer/modules
    name: ${opt:stage, self:provider.stage, 'dev'}-bin # optional, Deployed Lambda layer name
    description: oppenssl modlues from Amazon Linux2

package:
#  patterns:
  include:
    - dist/**
  exclude:
    - node_modules/**
    - src/**
    - test/**
    - .idea/**
    - ./*

functions:
  api:
    handler: dist/index.handler
    layers:
      - { Ref: NodeLambdaLayer }
      - { Ref: OpensslLambdaLayer }
    events:
      - http:
          cors: true
          path: /
          method: any
      - http:
          cors: true
          path: "{proxy+}"
          method: any
  batch:
    handler: dist/standalone/handler.hello
    timeout: 10
      
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
